{"version":3,"sources":["components/TodoList/TodoList.tsx","Api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","completed","randomize","handleChange","event","target","name","value","setState","prev","enableRandom","adjustContent","todos","newTodos","filter","todo","includes","todoList","i","length","j","Math","floor","random","temp","shuffleTodos","this","props","selectUserId","className","type","onChange","onClick","map","userId","id","React","Component","getTodos","a","fetch","json","getUsers","url","users","CurrentUser","user","resetUser","handleFetch","_","prevState","email","phone","style","marginLeft","marginTop","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c18a10a.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUserId: (id: number) => void,\n};\ntype State = {\n  title: string,\n  completed: string,\n  randomize: boolean,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    completed: '',\n    randomize: false,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  enableRandom = () => {\n    this.setState({ randomize: true });\n  };\n\n  adjustContent = (todos: Todo[]) => {\n    const { title, completed, randomize } = this.state;\n\n    const shuffleTodos = (todoList: Todo[]) => {\n      const newTodos = [...todoList];\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = newTodos.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = newTodos[i];\n\n        newTodos[i] = newTodos[j];\n        newTodos[j] = temp;\n      }\n\n      return newTodos;\n    };\n\n    const newTodos = [...todos]\n      .filter(todo => todo.title.includes(title))\n      .filter(todo => {\n        if (completed !== '') {\n          return `${todo.completed}` === completed;\n        }\n\n        return true;\n      });\n\n    return randomize ? shuffleTodos(newTodos) : newTodos;\n  };\n\n  render() {\n    const { title, completed } = this.state;\n    const { todos, selectUserId } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2 className=\"TodoList__title\">\n          Todos:\n          <input\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </h2>\n\n        <select\n          name=\"completed\"\n          value={completed}\n          onChange={this.handleChange}\n        >\n          <option value=\"\">all</option>\n          <option value=\"false\">active</option>\n          <option value=\"true\">completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={this.enableRandom}\n        >\n          Randomize\n        </button>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.adjustContent(todos).map(todo => (\n              <li\n                className=\"TodoList__item TodoList__item--checked\"\n                key={todo.id}\n              >\n                <p>\n                  {todo.title}\n                  {`. completed: ${todo.completed}`}\n                </p>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUserId(+todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","export const getTodos = async () => {\n  const url = 'https://mate.academy/students-api/todos';\n  const todos = await fetch(url);\n\n  return todos.json();\n};\n\nexport const getUsers = async (id: number) => {\n  const url = `https://mate.academy/students-api/users/${id}`;\n  const users = await fetch(url);\n\n  return users.json();\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { getUsers } from '../../Api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  selectUserId: (id: number) => void,\n}\n\ninterface State {\n  user: User,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: {} as User,\n  };\n\n  componentDidMount() {\n    this.handleFetch();\n  }\n\n  componentDidUpdate(_: Props, prevState: State) {\n    if (this.state.user.id !== prevState.user.id) {\n      this.handleFetch();\n    }\n  }\n\n  async handleFetch() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  resetUser = () => {\n    this.props.selectUserId(0);\n    this.setState({ user: {} as User });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          type=\"button\"\n          style={{ marginLeft: '115px', marginTop: '10px' }}\n          onClick={this.resetUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './Api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUserId = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} selectUserId={this.selectUserId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} selectUserId={this.selectUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}