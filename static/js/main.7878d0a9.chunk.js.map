{"version":3,"sources":["components/TodoList/TodoList.tsx","Api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","completed","handleChange","event","target","name","value","setState","prev","adjustContent","todos","filter","todo","includes","this","props","selectUserId","enableRandom","className","type","onChange","onClick","map","userId","id","React","Component","getTodos","a","fetch","json","getUsers","url","users","CurrentUser","user","resetUser","handleFetch","prevProps","email","phone","style","marginLeft","marginTop","App","selectedUserId","randomize","newTodos","i","length","j","Math","floor","random","temp","shuffleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7878d0a9.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUserId: (id: number) => void,\n  enableRandom: () => void,\n};\n\ntype State = {\n  title: string,\n  completed: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    completed: '',\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  adjustContent = (todos: Todo[]) => {\n    const { title, completed } = this.state;\n\n    const newTodos = [...todos]\n      .filter(todo => todo.title.includes(title))\n      .filter(todo => {\n        if (completed !== '') {\n          return `${todo.completed}` === completed;\n        }\n\n        return true;\n      });\n\n    return newTodos;\n  };\n\n  render() {\n    const { title, completed } = this.state;\n    const { todos, selectUserId, enableRandom } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2 className=\"TodoList__title\">\n          Todos:\n          <input\n            name=\"title\"\n            type=\"text\"\n            value={title}\n            onChange={this.handleChange}\n          />\n        </h2>\n\n        <select\n          name=\"completed\"\n          value={completed}\n          onChange={this.handleChange}\n        >\n          <option value=\"\">all</option>\n          <option value=\"false\">active</option>\n          <option value=\"true\">completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={enableRandom}\n        >\n          Randomize\n        </button>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.adjustContent(todos).map(todo => (\n              <li\n                className=\"TodoList__item TodoList__item--checked\"\n                key={todo.id}\n              >\n                <p>\n                  {todo.title}\n                  {`. completed: ${todo.completed}`}\n                </p>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUserId(+todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","export const getTodos = async () => {\n  const url = 'https://mate.academy/students-api/todos';\n  const todos = await fetch(url);\n\n  return todos.json();\n};\n\nexport const getUsers = async (id: number) => {\n  const url = `https://mate.academy/students-api/users/${id}`;\n  const users = await fetch(url);\n\n  return users.json();\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { getUsers } from '../../Api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number,\n  selectUserId: (id: number) => void,\n}\n\ninterface State {\n  user: User | null,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.handleFetch();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.handleFetch();\n    }\n  }\n\n  async handleFetch() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  resetUser = () => {\n    this.props.selectUserId(0);\n    this.setState({ user: null });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return user && (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"\n            TodoList__user-button\n            TodoList__user-button--selected\n            button\n          \"\n          type=\"button\"\n          style={{ marginLeft: '115px', marginTop: '10px' }}\n          onClick={this.resetUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/no-unused-state */\n/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './Api';\n\ntype Props = {};\n\ntype State = {\n  selectedUserId: number;\n  todos: Todo[],\n  randomize: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    randomize: false,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos: [...todos] });\n  }\n\n  enableRandom = () => {\n    const shuffleTodos = () => {\n      const newTodos = [...this.state.todos];\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = newTodos.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = newTodos[i];\n\n        newTodos[i] = newTodos[j];\n        newTodos[j] = temp;\n      }\n\n      return newTodos;\n    };\n\n    this.setState({\n      randomize: true,\n      todos: shuffleTodos(),\n    });\n  };\n\n  selectUserId = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUserId={this.selectUserId}\n            enableRandom={this.enableRandom}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} selectUserId={this.selectUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}